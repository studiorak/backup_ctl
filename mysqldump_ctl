#!/usr/bin/env bash
# set -o xtrace 
# author: jeanluc.rakotovao@gmail.com 

#{{{ USAGE
if [[ -z "$@" ]]
  then
    echo "usage :
    $0 < -p /some/dst/path > [-f]                
    -p  dump destination path
    -f  force (default is retry on failure)
    "
    exit 0
fi
#}}} USAGE

#{{{ INIT
  # some best practices 
  set -o errexit
  set -o pipefail
  set -o nounset
  
  # Set magic variables for current file & dir
  __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
  __base="$(basename ${__file} .sh)"
  __root="$(cd "$(dirname "${__dir}")" && pwd)" # <-- change this as it depends on your app
  
  # files 
  lock_file="/tmp/${__base}.lock"  
  
  # params 
  opt=$@ 
  mysql_opt=" 
  --defaults-file=/etc/mysql/debian.cnf 
  --default-character-set=utf8 
  "
  mysqldump_opt=" 
  --defaults-file=/etc/mysql/debian.cnf * 
  --lock-tables=0 
  --default-character-set=utf8 
  --max_allowed_packet=512M --force"

  # date 
  timestamp=$(date +%Y-%m-%d)

  # bin substitution 
  mysql="$( which mysql ) ${mysql_opt}"
  mysqldump="$( which mysqldump ) ${mysqldump_opt}"
  gzip=$(which gzip) || (echo "[WARNING] gzip is not installed")
  gunzip=$(which gunzip) || (echo "[WARNING] gunzip is not installed")
#}}} INIT

#{{{ PARAMS
  while getopts ":p:f" opt; do
    case $opt in
      p)
        dump_path=$(echo "$OPTARG" | sed 's/\/*$//g') # remove endline slash
        mkdir -p ${dump_path}
        ;;
      f)
        override_data=true
        ;;
      \?)
        echo "Invalid option: $OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option $OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
#}}} PARAMS

#{{{ LOCKFILE
  ErrLock(){
    echo "this process is already owned by PID $(cat $lock_file) with $lock_file"
    exit 1
  }
  RmLock(){
    rm -f $lock_file 
  }
  MkLock(){
    set -o noclobber; echo "$$" > "$lock_file" 2> /dev/null || ErrLock
    set +o noclobber
  }
  WrLog(){
    if [ "$?" -eq "0" ]
      then status="SUCCESS" 
    else 
      status=ERROR 
    fi
    msg=${1:-}
    echo "$(date) - [${status}] - ${msg:-}" >> "${dump_path}/${timestamp}/dump.log"
  }
#}}} LOCKFILE 

#{{{ METHODS
  MkDump(){
  # create set of useful files
  mkdir -p ${dump_path}/${timestamp} 
  touch "${dump_path}/${timestamp}/dump.log" 

  # execute the dump for each table 
  for db in $($mysql --show-warnings="false" --execute="show databases" | egrep "([[:alnum:]]|[\-\_])" | egrep -v "Database"); do
    mkdir -p "${dump_path}/${timestamp}/${db}" #|| echo "The following directory can't be created: ${dump_path}"
    for table in $($mysql --execute="use ${db}; show tables" | egrep "([[:alnum:]]|[\-\_])" | grep -v "Tables_in"); do
      if [ -z "${override_data:-}" ] && egrep -R "\[SUCCESS\] - Dump ${db} ${table}$" "${dump_path}/${timestamp}/dump.log"
        then
          WrLog "[SKIPPING] - dump ${db} ${table}"
        else
          ${mysqldump} ${db} ${table} | ${gzip} > "${dump_path}/${timestamp}/${db}/${table}"
          WrLog "Dump ${db} ${table}"
      fi
    done
  done
  }
  RollBack(){ 
    # Roll-back on exit non 0 
    rm -rf "${dump_path}/${timestamp}"; 
    RmLock
  }
#}}} METHODS

#{{{ BODY
  # only one dump process
  MkLock 
  MkDump || RollBack
  RmLock
  exit 0
#}}} BODY
