#!/usr/bin/env bash
#set -o xtrace 
# author: jeanluc.rakotovao@gmail.com 

#{{{ USAGE
if [[ -z "$@" ]]
  then
    echo "usage :
    $0 <-p /some/dst/path> <-t type> [-f]                
    -p  dump destination path
    -t  type : mysql, mongo, etc.
    -f  force (default is retry on failure)
    "
    exit 0
fi
#}}} USAGE

#{{{ INIT
  # some best practices 
  set -o errexit
  set -o pipefail
  set -o nounset
  
  # Set magic variables for current file & dir
  __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
  __base="$(basename ${__file} .sh)"
  __root="$(cd "$(dirname "${__dir}")" && pwd)"  
  
  # files 
  lock_file="/tmp/${__base}.lock"  
  
  # params 
  opt=$@ 

  # date 
  timestamp=$(date +%Y-%m-%d)

  gzip=$(which gzip) || (echo "[WARNING] gzip is not installed")
  gunzip=$(which gunzip) || (echo "[WARNING] gunzip is not installed")
#}}} INIT

#{{{ PARAMS
  while getopts ":p:t:f" opt; do
    case $opt in
      p)
        dump_path=$(echo "$OPTARG" | sed 's/\/*$//g') # remove endline slash
        ;;
      t)
        dump_type="$OPTARG"
        ;;
      f)
        override_data=true
        ;;
      \?)
        echo "Invalid option: $OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option $OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
#}}} PARAMS

#{{{ LOCKFILE
  ErrLock(){
    echo "this process is already owned by PID $(cat $lock_file) with $lock_file"
    exit 1
  }
  RmLock(){
    rm -f $lock_file 
  }
  MkLock(){
    set -o noclobber; echo "$$" > "$lock_file" 2> /dev/null || ErrLock
    set +o noclobber
  }
#}}} LOCKFILE 

#{{{ METHODS
  BuildDir(){
    # create set of useful files
    dump_abs_path="${dump_path}/${dump_type}/${timestamp}"
    dump_log_file="${dump_abs_path}/history.log"
    mkdir -p ${dump_abs_path}
    touch "${dump_log_file}"
  }

  WrLog(){
    if [ "$?" -eq "0" ]
      then status="SUCCESS" 
    else 
      status=ERROR 
    fi
    msg=${1:-}
    echo "$(date) - [${status}] - ${msg:-}" >> "${dump_log_file}"
  }

  RollBack(){ 
    # Roll-back on exit non 0 
    rm -rf "${dump_abs_path}"; 
    RmLock
  }

  MkMongoDump(){
  # some useful directories
  BuildDir
  MONGO=$( which mongo)
  MONGODUMP=$( which mongodump)
  MONGOPASSWD=$( grep db.getSiblingDB /root/.mongorc.js | egrep -o '\"[[:alnum:]]+\"\)\;' | egrep -o '[[:alnum:]]+' )

  for db in $( echo "show dbs" | ${MONGO} --quiet | awk '{print $1}' ) ; do 
    mkdir -p "${dump_abs_path}/${db}" 
    for table in $( echo "show collections" | ${MONGO} ${db} --quiet | awk '{print $1}'  ) ; do
      if [ -z "${override_data:-}" ] && egrep -R "\[SUCCESS\] - Dump ${db} ${table}$" "${dump_log_file}"
        then
          # skip dump if exists
          WrLog "[SKIPPING] - dump ${db} ${table}"
        else
          # or make dump and log status 
          ${MONGODUMP} -u root -p ${MONGOPASSWD} -d ${db} -c ${table} --gzip -o "${dump_abs_path}/${db}/${table}"
          WrLog "Dump ${db} ${table}"
      fi
    done
  done
  }

  MkMysqlDump(){
  mysql_opt="
  --defaults-file=/etc/mysql/debian.cnf
  --default-character-set=utf8"

  mysqldump_opt="
  --defaults-file=/etc/mysql/debian.cnf
  --lock-tables=0
  --default-character-set=utf8
  --max_allowed_packet=512M
  --force"

  # bin substitution 
  mysql="$(which mysql) ${mysql_opt}" || echo "mysql not installed"
  mysqldump="$(which mysqldump) ${mysqldump_opt}" || echo "mysqldump not installed"

  # some useful directories
  BuildDir

  # execute the dump for each table 
  for db in $($mysql --execute="show databases \G;" | egrep "Database" | awk '{print $2}' ); do
    mkdir -p "${dump_abs_path}/${db}" #|| echo "The following directory can't be created: ${dump_path}"
    for table in $($mysql --execute="use ${db}; show tables \G;" | egrep "Table" | awk '{print $2}'); do
      # if NOT FORCE overwrite dumps 
      if [ -z "${override_data:-}" ] && egrep -R "\[SUCCESS\] - Dump ${db} ${table}$" "${dump_log_file}"
        then
          # skip !
          WrLog "[SKIPPING] - dump ${db} ${table}"
        else
          # or dump !
          ${mysqldump} ${db} ${table} | ${gzip} > "${dump_abs_path}/${db}/${table}"
          WrLog "Dump ${db} ${table}"
      fi
    done
  done
  }

#}}} METHODS

#{{{ BODY
  # only one dump process
  MkLock 

  case "$dump_type" in
    mysql)
      MkMysqlDump || RollBack ;;
    mongo)
      MkMongoDump || RollBack ;;
  esac 

  RmLock
  exit 0
#}}} BODY

